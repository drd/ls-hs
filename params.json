{"name":"Ls-hs","body":"# 3-Dimensional Lindenmayer Systems in Haskell\r\n\r\n## Overview\r\n\r\nLindenmayer Systems are recursive, self-rewriting grammars which can approximate\r\ngrowth patterns observed in nature, most commonly known for the branching\r\nstructures in plants and trees. The grammars generate strings which can be\r\ninterpreted as part of a sophisticated Logo/Turtle-graphics command, generating\r\n2 and 3-dimensional images in the process.\r\n\r\n\r\n## Example\r\n\r\nA Lindenmayer grammar (L-Grammar) is a 3-tuple composed of the alphabet, the\r\nstart or initial string, and a list of productions. To produce the 2nd iteration\r\nof an L-grammar, one walks the start string, replacing each existing character\r\nwith a matching production rule, or itself if no productions match, into a new\r\nstring. To illustrate:\r\n\r\n### Grammar:\r\n\r\n```\r\n| alphabet = { F + - }\r\n| start = F + F + F\r\n| productions:\r\n|   F -> F + F - F + F\r\n```\r\n\r\n### Iterations (parenthesis added for some clarity):\r\n\r\n```\r\n1 : F+F+F\r\n2 : (F+F-F+F)+(F+F-F+F)+(F+F-F+F)\r\n3 : ( (F+F-F+F) + (F+F-F+F) - (F+F-F+F) + (F+F-F+F) ) + ( (F+F-F+F) + (F+F-F+F)\r\n    - (F+F-F+F)) + (F+F-F+F) ) + ( (F+F-F+F) + (F+F-F+F) - (F+F-F+F) + (F+F-F+F) )\r\n4 : ...\r\n```\r\n\r\nTo interpret these strings, we need some additional information:\r\n\r\n## Commands:\r\n\r\n```\r\n| F : from the current point, draw a line of d pixels\r\n| + : rotate the turtle theta degrees clockwise\r\n| - : rotate the turtle theta degrees anticlockwise\r\n```\r\n\r\n## Parameters:\r\n\r\n```\r\n| theta : 60deg\r\n| d     : 50px\r\n```\r\n\r\n\r\n# LGrammar Implementation\r\n\r\nAn LGrammar is simply an axiom and a list of Producions, each of which\r\nis a predecessor and a successor String. Again, to implement either\r\nparametric or context-sensitive productions, I would change at least\r\nthe type of the predecessor, and likely the type of the successor, to\r\na more structured datatype. I also considered a more functional\r\nrepresentation, along the lines of the Image combinators presented in\r\nclass. I believe they would work particularly well with Parsec, as\r\neach production could be built up by composing functions, if I were\r\nto add support for an external file format.\r\n\r\n```haskell\r\n> data Production = Pr { pre, suc  :: String }\r\n>                   deriving Show\r\n\r\n> data LGrammar   = Lg { axiom       :: String,\r\n>                        productions :: [Production] }\r\n>                   deriving Show\r\n```","tagline":"3D L-Systems in Haskell drawn with OpenGL","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}